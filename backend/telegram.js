require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const ADMIN_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const BACKEND_URL = process.env.BACKEND_URL || 'https://shop-kw6q.onrender.com';

const helpText = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /addproduct –ù–∞–∑–≤–∞–Ω–∏–µ; –¶–µ–Ω–∞; products/—Ñ–∞–π–ª.jpg ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
‚Ä¢ /edit ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
‚Ä¢ /editproduct ID; –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ; –ù–æ–≤–∞—è —Ü–µ–Ω–∞; –ù–æ–≤—ã–π –ø—É—Ç—å ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
‚Ä¢ /delete ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É–¥–∞–ª–µ–Ω–∏—é
‚Ä¢ /deleteproduct ID ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä

–ü—Ä–∏–º–µ—Ä: /addproduct –ö—É—Ä—Ç–∫–∞; 99.99; products/jacket.jpg
–ü—Ä–∏–º–µ—Ä: /editproduct 3; –ù–æ–≤–∞—è –∫—É—Ä—Ç–∫–∞; 199.99; products/new.jpg
–ü—Ä–∏–º–µ—Ä: /deleteproduct 4
`;

bot.onText(/^\/(help|start)/, (msg) => {
  bot.sendMessage(msg.chat.id, helpText);
});

bot.onText(/^\/addproduct (.+)/, async (msg, match) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) {
    return bot.sendMessage(msg.chat.id, '‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã!');
  }
  const args = match[1].split(';').map(s => s.trim());
  if (args.length < 3) {
    return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /addproduct –ù–∞–∑–≤–∞–Ω–∏–µ; –¶–µ–Ω–∞; products/—Ñ–∞–π–ª.jpg');
  }
  const [name, price, location] = args;
  try {
    const res = await axios.post(`${BACKEND_URL}/products/add`, { name, price, location });
    if (res.data.success) {
      bot.sendMessage(msg.chat.id, `‚úÖ –¢–æ–≤–∞—Ä "${name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${res.data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.'}`);
    }
  } catch (err) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:\n${err.response?.data?.error || err.message}`);
  }
});

bot.onText(/^\/edit$/, async (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) {
    return bot.sendMessage(msg.chat.id, '‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã!');
  }
  try {
    const res = await axios.get(`${BACKEND_URL}/products`);
    const products = res.data;
    if (!products.length) return bot.sendMessage(msg.chat.id, "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
    let txt = `–¢–æ–≤–∞—Ä—ã:\n`;
    txt += products.map(p =>
      `ID: ${p.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}\n–¶–µ–Ω–∞: $${p.price}\n–§–æ—Ç–æ: ${p.location}\n---`
    ).join('\n');
    txt += `\n–ò—Å–ø–æ–ª—å–∑—É–π: /editproduct ID; –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ; –ù–æ–≤–∞—è —Ü–µ–Ω–∞; –ù–æ–≤—ã–π –ø—É—Ç—å\n–ü—Ä–∏–º–µ—Ä: /editproduct 2; –î–∂–æ–≥–≥–µ—Ä—ã; 79.99; products/jogger.png`;
    bot.sendMessage(msg.chat.id, txt);
  } catch (err) {
    bot.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.");
  }
});

bot.onText(/^\/editproduct (.+)/, async (msg, match) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) {
    return bot.sendMessage(msg.chat.id, '‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã!');
  }
  const args = match[1].split(';').map(s => s.trim());
  if (args.length < 4) {
    return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /editproduct ID; –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ; –ù–æ–≤–∞—è —Ü–µ–Ω–∞; –ù–æ–≤—ã–π –ø—É—Ç—å');
  }
  const [id, name, price, location] = args;
  try {
    const res = await axios.put(`${BACKEND_URL}/products/${id}`, { name, price, location }, {
      headers: { "x-admin-secret": process.env.ADMIN_SECRET }
    });
    if (res.data.success) {
      bot.sendMessage(msg.chat.id, `‚úèÔ∏è –¢–æ–≤–∞—Ä ID ${id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`);
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${res.data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.'}`);
    }
  } catch (err) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:\n${err.response?.data?.error || err.message}`);
  }
});

bot.onText(/^\/delete$/, async (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) {
    return bot.sendMessage(msg.chat.id, '‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã!');
  }
  try {
    const res = await axios.get(`${BACKEND_URL}/products`);
    const products = res.data;
    if (!products.length) return bot.sendMessage(msg.chat.id, "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
    let txt = `–¢–æ–≤–∞—Ä—ã:\n`;
    txt += products.map(p =>
      `ID: ${p.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}\n–¶–µ–Ω–∞: $${p.price}\n–§–æ—Ç–æ: ${p.location}\n---`
    ).join('\n');
    txt += `\n–ò—Å–ø–æ–ª—å–∑—É–π: /deleteproduct ID\n–ü—Ä–∏–º–µ—Ä: /deleteproduct 4`;
    bot.sendMessage(msg.chat.id, txt);
  } catch (err) {
    bot.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.");
  }
});

bot.onText(/^\/deleteproduct (\d+)/, async (msg, match) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) {
    return bot.sendMessage(msg.chat.id, '‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã!');
  }
  const id = match[1];
  try {
    const res = await axios.delete(`${BACKEND_URL}/products/${id}`, {
      headers: { "x-admin-secret": process.env.ADMIN_SECRET }
    });
    if (res.data.success) {
      bot.sendMessage(msg.chat.id, `üóëÔ∏è –¢–æ–≤–∞—Ä ID ${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!`);
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${res.data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.'}`);
    }
  } catch (err) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:\n${err.response?.data?.error || err.message}`);
  }
});

module.exports = { notifyAdminOrder };

if (require.main === module) {
  bot.sendMessage(ADMIN_CHAT_ID, '–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏! –ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.');
}
