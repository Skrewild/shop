require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const https = require('https');
const path = require('path');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

const ADMIN_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const BACKEND_URL = process.env.BACKEND_URL || 'https://shop-kw6q.onrender.com';
const ADMIN_SECRET = process.env.ADMIN_SECRET;

async function notifyAdminOrder({ email, user = {}, items, total, orderId, cancelled = false }) {
  const info = `
${cancelled ? '‚ùå ORDER CANCELLED!' : 'üõí New order!'} ${orderId ? `‚Ññ${orderId}` : ""}
üë§ Name: ${user.name || "‚Äî"}
üìß Email: ${email}
‚òéÔ∏è Contact: ${user.contact || "‚Äî"}
üèôÔ∏è City: ${user.city || "‚Äî"}
üè† Address: ${user.address || "‚Äî"}

${items.map(i => `‚Ä¢ ${i.name} ‚Äî $${i.price}`).join('\n')}
üíµ Total: $${total}
  `.trim();

  await bot.sendMessage(ADMIN_CHAT_ID, info);
}

bot.on('photo', async (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;

  const caption = msg.caption;
  if (!caption || !caption.includes(';')) {
    return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –ù–∞–∑–≤–∞–Ω–∏–µ; –¶–µ–Ω–∞\n–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ID; –ù–∞–∑–≤–∞–Ω–∏–µ; –¶–µ–Ω–∞');
  }

  const parts = caption.split(';').map(s => s.trim());

  if (parts.length === 2) {
    const [name, priceRaw] = parts;
    const price = parseFloat(priceRaw);
    if (!name || isNaN(price)) {
      return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –®–∞–ø–∫–∞; 990');
    }
    return handleAddOrEdit({ msg, isEdit: false, name, price });
  }

  if (parts.length === 3) {
    const [idRaw, name, priceRaw] = parts;
    const id = parseInt(idRaw);
    const price = parseFloat(priceRaw);
    if (!id || !name || isNaN(price)) {
      return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 12; –®–∞–ø–∫–∞; 990');
    }
    return handleAddOrEdit({ msg, isEdit: true, id, name, price });
  }

  return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏.');
});

async function handleAddOrEdit({ msg, isEdit, id, name, price }) {
  const fileId = msg.photo[msg.photo.length - 1].file_id;
  const file = await bot.getFile(fileId);
  const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
  const fileExt = path.extname(file.file_path);
  const fileName = `${Date.now()}${fileExt}`;
  const filePath = `./temp/${fileName}`;

  await new Promise((resolve, reject) => {
    const stream = fs.createWriteStream(filePath);
    https.get(fileUrl, (res) => {
      res.pipe(stream);
      stream.on('finish', () => stream.close(resolve));
    }).on('error', reject);
  });

  const form = new FormData();
  form.append('image', fs.createReadStream(filePath));

  try {
    const uploadRes = await axios.post(`${BACKEND_URL}/upload`, form, {
      headers: form.getHeaders()
    });

    const location = uploadRes.data.location;

    if (isEdit) {
      const updateRes = await axios.put(`${BACKEND_URL}/products/${id}`, {
        name, price, location
      }, {
        headers: { 'x-admin-secret': ADMIN_SECRET }
      });

      if (updateRes.data.success) {
        return bot.sendMessage(msg.chat.id, `‚úèÔ∏è –¢–æ–≤–∞—Ä ID ${id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!`);
      } else {
        return bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateRes.data.error}`);
      }
    } else {
      const addRes = await axios.post(`${BACKEND_URL}/products/add`, { name, price, location });

      if (addRes.data.success) {
        return bot.sendMessage(msg.chat.id, `‚úÖ –¢–æ–≤–∞—Ä "${name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º!`);
      } else {
        return bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${addRes.data.error}`);
      }
    }

  } catch (err) {
    return bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.response?.data?.error || err.message}`);
  } finally {
    fs.unlink(filePath, () => {});
  }
}

bot.onText(/^\/start|\/help/, (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  bot.sendMessage(msg.chat.id, `
üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:

üì∏ –ß—Ç–æ–±—ã –î–û–ë–ê–í–ò–¢–¨ —Ç–æ–≤–∞—Ä:
–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:
"–ù–∞–∑–≤–∞–Ω–∏–µ; –¶–µ–Ω–∞"

–ü—Ä–∏–º–µ—Ä:
"–§—É—Ç–±–æ–ª–∫–∞; 2990"

‚úèÔ∏è –ß—Ç–æ–±—ã –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ —Ç–æ–≤–∞—Ä:
–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /edit, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —Ç–æ–≤–∞—Ä–∞.
–ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:
"ID; –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ; –ù–æ–≤–∞—è —Ü–µ–Ω–∞"

–ü—Ä–∏–º–µ—Ä:
"12; –ß—ë—Ä–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞; 4990"

–ö–æ–º–∞–Ω–¥—ã:
/edit ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
/delete ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
/orders ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã
/deleteorder <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
/help ‚Äî –ø–æ–º–æ—â—å
`.trim());
});

bot.onText(/^\/edit$/, async (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  try {
    const res = await axios.get(`${BACKEND_URL}/products`);
    if (!Array.isArray(res.data) || !res.data.length)
      return bot.sendMessage(msg.chat.id, '‚ùóÔ∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    const text = res.data.map(p => `ID: ${p.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}\n–¶–µ–Ω–∞: $${p.price}\n---`).join('\n');
    bot.sendMessage(msg.chat.id, `–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n${text}`);
  } catch {
    bot.sendMessage(msg.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.');
  }
});

bot.onText(/^\/delete$/, async (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  try {
    const res = await axios.get(`${BACKEND_URL}/products`);
    if (!Array.isArray(res.data) || !res.data.length)
      return bot.sendMessage(msg.chat.id, '‚ùóÔ∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    const text = res.data.map(p => `ID: ${p.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}\n–¶–µ–Ω–∞: $${p.price}\n---`).join('\n');
    bot.sendMessage(msg.chat.id, `–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n${text}\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –≤–≤–µ–¥–∏:\n/delete <ID>`);
  } catch {
    bot.sendMessage(msg.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.');
  }
});

bot.onText(/^\/delete (\d+)/, async (msg, match) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  const id = match[1].trim();
  try {
    const res = await axios.delete(`${BACKEND_URL}/products/${id}`, {
      headers: { 'x-admin-secret': ADMIN_SECRET }
    });
    if (res.data.success) {
      bot.sendMessage(msg.chat.id, `üóëÔ∏è –¢–æ–≤–∞—Ä ID ${id} —É–¥–∞–ª—ë–Ω!`);
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${res.data.error || '–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.'}`);
    }
  } catch (err) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:\n${err.response?.data?.error || err.message}`);
  }
});

bot.onText(/^\/orders$/, async (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  try {
    const res = await axios.get(`${BACKEND_URL}/admin/orders`, {
      headers: { 'x-admin-secret': ADMIN_SECRET }
    });
    if (!Array.isArray(res.data) || !res.data.length)
      return bot.sendMessage(msg.chat.id, '–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.');
    const text = res.data.map(o =>
      `Order ID: ${o.id}\n` +
      `User: ${o.name}\nEmail: ${o.email}\nContact: ${o.contact}\nCity: ${o.city}\nAddress: ${o.address}\n` +
      `Product: ${o.product_name}\nPrice: $${o.price}\nTime: ${o.created_at?.slice(0,19).replace('T', ' ')}\n---`
    ).join('\n');
    bot.sendMessage(msg.chat.id, `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n${text}\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å: /deleteorder <ID>`);
  } catch (err) {
    bot.sendMessage(msg.chat.id, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã: ${err.response?.data?.error || err.message}`);
  }
});

bot.onText(/^\/deleteorder (\d+)/, async (msg, match) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  const id = match[1].trim();
  try {
    const res = await axios.delete(`${BACKEND_URL}/admin/orders/${id}`, {
      headers: { 'x-admin-secret': ADMIN_SECRET }
    });
    if (res.data.success) {
      bot.sendMessage(msg.chat.id, `üóëÔ∏è –ó–∞–∫–∞–∑ ID ${id} —É–¥–∞–ª—ë–Ω!`);
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${res.data.error || '–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.'}`);
    }
  } catch (err) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:\n${err.response?.data?.error || err.message}`);
  }
});

module.exports = { notifyAdminOrder };
