require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

const ADMIN_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const BACKEND_URL = process.env.BACKEND_URL || 'https://shop-kw6q.onrender.com';
const ADMIN_SECRET = process.env.ADMIN_SECRET;

// --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–∞—Ö –∏ –æ—Ç–º–µ–Ω–∞—Ö ---
async function notifyAdminOrder({ email, user = {}, items, total, orderId, cancelled = false }) {
  const info = `
${cancelled ? '‚ùå –û–¢–ú–ï–ù–ê –∑–∞–∫–∞–∑–∞!' : 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!'} ${orderId ? `‚Ññ${orderId}` : ""}
üë§ Name: ${user.name || "‚Äî"}
üìß Email: ${email}
‚òéÔ∏è Contact: ${user.contact || "‚Äî"}
üèôÔ∏è City: ${user.city || "‚Äî"}
üè† Address: ${user.address || "‚Äî"}

${items.map(i => `‚Ä¢ ${i.name} ‚Äî $${i.price}`).join('\n')}
üíµ Result: $${total}
  `.trim();

  await bot.sendMessage(ADMIN_CHAT_ID, info);
}

// --- HELP ---
bot.onText(/^\/start|\/help/, (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  bot.sendMessage(msg.chat.id, `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/addproduct <–Ω–∞–∑–≤–∞–Ω–∏–µ>; <—Ü–µ–Ω–∞>; <products/—Ñ–∞–π–ª.jpg>
/edit ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
/delete ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
/help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞

–î–ª—è /edit –∏ /delete: –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ —Å ID, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –∫–æ–º–∞–Ω–¥—É:
/edit <ID>; <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>; <–Ω–æ–≤–∞—è —Ü–µ–Ω–∞>; <products/—Ñ–∞–π–ª.jpg>
/delete <ID>
  `.trim());
});

// --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê ---
bot.onText(/^\/addproduct (.+)/, async (msg, match) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  const args = match[1].split(';').map(s => s.trim());
  if (args.length < 3) {
    return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /addproduct –ù–∞–∑–≤–∞–Ω–∏–µ; –¶–µ–Ω–∞; products/—Ñ–∞–π–ª.jpg');
  }
  const [name, price, location] = args;
  try {
    const res = await axios.post(`${BACKEND_URL}/products/add`, { name, price, location });
    if (res.data.success) {
      bot.sendMessage(msg.chat.id, `‚úÖ –¢–æ–≤–∞—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${res.data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.'}`);
    }
  } catch (err) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: ${err.response?.data?.error || err.message}`);
  }
});

// --- –°–ü–ò–°–û–ö –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ---
bot.onText(/^\/edit$/, async (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  try {
    const res = await axios.get(`${BACKEND_URL}/products`);
    if (!Array.isArray(res.data) || !res.data.length)
      return bot.sendMessage(msg.chat.id, '‚ùóÔ∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    const text = res.data.map(p => `ID: ${p.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}\n–¶–µ–Ω–∞: $${p.price}\n–ö–∞—Ä—Ç–∏–Ω–∫–∞: ${p.location}\n---`).join('\n');
    bot.sendMessage(msg.chat.id, `–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n${text}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å:\n/edit <ID>; <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>; <–Ω–æ–≤–∞—è —Ü–µ–Ω–∞>; <products/—Ñ–∞–π–ª.jpg>`);
  } catch {
    bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
  }
});

// --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –¢–û–í–ê–† ---
bot.onText(/^\/edit (\d+);([^;]+);([^;]+);(.+)/, async (msg, match) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  const id = match[1].trim();
  const name = match[2].trim();
  const price = match[3].trim();
  const location = match[4].trim();
  try {
    const res = await axios.put(`${BACKEND_URL}/products/${id}`, { name, price, location }, {
      headers: { 'x-admin-secret': ADMIN_SECRET }
    });
    if (res.data.success) {
      bot.sendMessage(msg.chat.id, `‚úèÔ∏è –¢–æ–≤–∞—Ä ID ${id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!`);
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${res.data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å.'}`);
    }
  } catch (err) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:\n${err.response?.data?.error || err.message}`);
  }
});

// --- –°–ü–ò–°–û–ö –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø ---
bot.onText(/^\/delete$/, async (msg) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  try {
    const res = await axios.get(`${BACKEND_URL}/products`);
    if (!Array.isArray(res.data) || !res.data.length)
      return bot.sendMessage(msg.chat.id, '‚ùóÔ∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    const text = res.data.map(p => `ID: ${p.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}\n–¶–µ–Ω–∞: $${p.price}\n–ö–∞—Ä—Ç–∏–Ω–∫–∞: ${p.location}\n---`).join('\n');
    bot.sendMessage(msg.chat.id, `–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n${text}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å:\n/delete <ID>`);
  } catch {
    bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
  }
});

// --- –£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–† ---
bot.onText(/^\/delete (\d+)/, async (msg, match) => {
  if (String(msg.chat.id) !== String(ADMIN_CHAT_ID)) return;
  const id = match[1].trim();
  try {
    const res = await axios.delete(`${BACKEND_URL}/products/${id}`, {
      headers: { 'x-admin-secret': ADMIN_SECRET }
    });
    if (res.data.success) {
      bot.sendMessage(msg.chat.id, `üóëÔ∏è –¢–æ–≤–∞—Ä ID ${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!`);
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${res.data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.'}`);
    }
  } catch (err) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n${err.response?.data?.error || err.message}`);
  }
});

module.exports = { notifyAdminOrder };
